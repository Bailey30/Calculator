{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","buttons","output","setOutput","sum","setSum","squareHandler","length","joinedOutput","join","splitans","square","toString","split","sqrtHandler","sqrt","screenClear","equalsHandler","evaluate","storedSum","push","unshift","className","map","button","index","onClick","e","target","innerHTML","storedOutput","pop","clickHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oOAwGeA,EAnGH,WACV,MAAkBC,mBAAS,CAAC,SAAU,OAAQ,QAAS,OAAQ,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,MAA/GC,EAAP,oBACA,EAA4BD,mBAAS,CAAC,IAAtC,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAAsBH,mBAAS,IAA/B,mBAAOI,EAAP,KAAYC,EAAZ,KAmCMC,EAAgB,WACpB,GAAIJ,EAAOK,OAAQ,EAAG,CACpB,IACMC,EADY,YAAON,GACSO,KAAK,IAGjCC,EAFSC,aAAOH,GACAI,WACEC,MAAM,IAE9BV,EAAUO,KAIRI,EAAc,WAClB,GAAIZ,EAAOK,OAAQ,EAAG,CACpB,IACMC,EADY,YAAON,GACSO,KAAK,IAGjCC,EAFSK,aAAKP,GACEI,WACEC,MAAM,IAC9BV,EAAUO,KAGRM,EAAc,WAClBb,EAAU,KACVE,EAAO,KAGHY,EAAgB,WACpB,GAAIf,EAAOK,OAAS,EAAG,CACrB,IACMC,EADY,YAAON,GACSO,KAAK,IAGjCC,EAFSQ,YAASV,GACFI,WACEC,MAAM,IAC9BV,EAAUO,GAEV,IAAMS,EAAS,YAAOf,GACtBe,EAAUC,KAAK,KACfD,EAAUE,QAAQ,KAClBhB,EAAOc,KAIX,OACE,sBAAKG,UAAU,aAAf,UACE,sBAAKA,UAAU,SAAf,UAAyBpB,EAAO,qBAAKoB,UAAU,MAAf,SAAsBlB,OAEtD,qBAAKkB,UAAU,YAAf,SAEGrB,EAAQsB,KAAI,SAACC,EAAQC,GACpB,OAAO,wBAAQH,UAAU,MAAkBI,QAAS,SAACC,GAAD,OAjFvC,SAACF,EAAOE,GAE3B,GAA2B,MAAvBA,EAAEC,OAAOC,WAAqB3B,EAChCe,SACG,GAA4B,WAAvBU,EAAEC,OAAOC,UACjBvB,SACK,GAA2B,SAAvBqB,EAAEC,OAAOC,UAClBf,SACK,GAA4B,UAAvBa,EAAEC,OAAOC,UACnBb,SACK,GAA2B,SAAvBW,EAAEC,OAAOC,UAAqB,CACvC,IAAMC,EAAY,YAAO5B,GACzB4B,EAAaC,MACb5B,EAAU2B,GACV,IAAMX,EAAS,YAAOf,GACtBe,EAAUY,MACV1B,EAAOc,QACF,GAAe,UAAXjB,EACTC,EAAU,aAEP,CAEH,IAAM2B,EAAY,YAAO5B,GACzB4B,EAAaV,KAAKnB,EAAQwB,IAC1BtB,EAAU2B,GAEV,IAAMX,EAAS,YAAOf,GACtBe,EAAUC,KAAKnB,EAAQwB,IACvBpB,EAAOc,IAqDwDa,CAAaP,EAAOE,IAAxE,SAA6EH,GAAhDC,YCjF/BQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5b3119a9.chunk.js","sourcesContent":["import React from \"react\"\nimport { useState } from \"react\"\nimport { evaluate, sqrt, square  } from \"mathjs\"\n// const math = create(all, {})\n\nconst App = () => {\n  const [buttons] = useState([\"square\", \"sqrt\", \"clear\", \"back\", 7, 8, 9, \"*\", 4, 5, 6, \"-\", 1, 2, 3, \"+\", \".\", 0, \"=\", \"/\"])\n  const [output, setOutput] = useState([0])\n  const [sum, setSum] = useState([])\n\n  \n\n  const clickHandler = (index, e) => {\n    \n    if (e.target.innerHTML === \"=\" && output) {\n      equalsHandler() }\n    else if ( e.target.innerHTML === \"square\" ){\n      squareHandler()\n    } else if (e.target.innerHTML === \"sqrt\"){\n      sqrtHandler()\n    } else if ( e.target.innerHTML === \"clear\"){\n      screenClear()\n    } else if (e.target.innerHTML === \"back\"){\n      const storedOutput = [...output]\n      storedOutput.pop()\n      setOutput(storedOutput)\n      const storedSum = [...sum]\n      storedSum.pop()\n      setSum(storedSum)\n    } else if (output === \"error\") {\n      setOutput(\"error\")\n    }\n    else {\n      \n      const storedOutput = [...output]\n      storedOutput.push(buttons[index])\n      setOutput(storedOutput)\n\n      const storedSum = [...sum]\n      storedSum.push(buttons[index])\n      setSum(storedSum)\n    }\n  }\n  const squareHandler = () => {\n    if (output.length >0) {\n      const storedOutput = [...output]\n      const joinedOutput = storedOutput.join(\"\")\n      const answer = square(joinedOutput)\n      const strans = answer.toString()\n      const splitans = strans.split(\"\")\n      \n      setOutput(splitans)\n    }\n    \n  }\n  const sqrtHandler = () => {\n    if (output.length >0) {\n      const storedOutput = [...output]\n      const joinedOutput = storedOutput.join(\"\")\n      const answer = sqrt(joinedOutput)\n      const strans = answer.toString()\n      const splitans = strans.split(\"\")\n      setOutput(splitans)\n    }\n  }\n  const screenClear = () => {\n    setOutput(\"0\")\n    setSum(\"\")\n  }\n  \n  const equalsHandler = () => {\n    if (output.length > 1) {\n      const storedOutput = [...output]\n      const joinedOutput = storedOutput.join(\"\")\n      const answer = evaluate(joinedOutput)\n      const strans = answer.toString()\n      const splitans = strans.split(\"\")\n      setOutput(splitans)\n\n      const storedSum = [...sum]\n      storedSum.push(\")\")\n      storedSum.unshift(\"(\")\n      setSum(storedSum)\n    }\n  }\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"screen\">{output}<div className=\"sum\">{sum}</div></div>\n      \n      <div className=\"container\">\n\n        {buttons.map((button, index) => {\n          return <button className=\"btn\" key={index} onClick={(e) => clickHandler(index, e)}>{button}</button>\n\n        })}\n        \n      </div>\n    </div>\n  )\n}\n\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}