{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","buttons","output","setOutput","btnDisabled","setBtnDisabled","squareHandler","length","joinedOutput","join","answer","square","console","log","splitans","toString","split","sqrtHandler","sqrt","screenClear","backHandler","equalsHandler","evaluate","className","map","button","index","disabled","onClick","e","target","innerHTML","storedOutput","push","clickHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oOA2FeA,EAtFH,WACV,MAAkBC,mBAAS,CAAC,SAAU,OAAQ,QAAS,OAAQ,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,MAA/GC,EAAP,oBACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAsBMC,EAAgB,WACpB,GAAIJ,EAAOK,OAAQ,EAAG,CACpB,IACMC,EADY,YAAON,GACSO,KAAK,IACjCC,EAASC,aAAOH,GACtBI,QAAQC,IAAIH,GACZ,IACMI,EADSJ,EAAOK,WACEC,MAAM,IAC9Bb,EAAUW,KAGRG,EAAc,WAClB,GAAIf,EAAOK,OAAQ,EAAG,CACpB,IACMC,EADY,YAAON,GACSO,KAAK,IACjCC,EAASQ,aAAKV,GACpBI,QAAQC,IAAIH,GACZ,IACMI,EADSJ,EAAOK,WACEC,MAAM,IAC9Bb,EAAUW,KAGRK,EAAc,WAClBhB,EAAU,KAENiB,EAAc,aAGdC,EAAgB,WACpB,GAAInB,EAAOK,OAAS,EAAG,CACrB,IACMC,EADY,YAAON,GACSO,KAAK,IAGjCK,EAFSQ,YAASd,GACFO,WACEC,MAAM,IAC9Bb,EAAUW,KAKd,OACE,sBAAKS,UAAU,aAAf,UACE,qBAAKA,UAAU,SAAf,SAAyBrB,IACzB,qBAAKqB,UAAU,YAAf,SAEGtB,EAAQuB,KAAI,SAACC,EAAQC,GACpB,OAAO,wBAAQC,SAAUvB,EAAamB,UAAU,MAAkBK,QAAS,SAACC,GAAD,OAnE9D,SAACH,EAAOG,GAE3B,GAA2B,MAAvBA,EAAEC,OAAOC,WAAqB7B,EAChCmB,SAEG,GAA4B,WAAvBQ,EAAEC,OAAOC,UACjBzB,SACK,GAA2B,SAAvBuB,EAAEC,OAAOC,UAClBd,SACK,GAA4B,UAAvBY,EAAEC,OAAOC,UACnBZ,SACK,GAA2B,SAAvBU,EAAEC,OAAOC,UAClBX,QAEG,CACHf,GAAe,GACf,IAAM2B,EAAY,YAAO9B,GACzB8B,EAAaC,KAAKhC,EAAQyB,IAC1BvB,EAAU6B,IAiD4EE,CAAaR,EAAOG,IAA/F,SAAoGJ,GAAhDC,YChEtDS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7c0b6376.chunk.js","sourcesContent":["import React from \"react\"\nimport { useState } from \"react\"\nimport { evaluate, sqrt, square  } from \"mathjs\"\n// const math = create(all, {})\n\nconst App = () => {\n  const [buttons] = useState([\"square\", \"sqrt\", \"clear\", \"back\", 7, 8, 9, \"*\", 4, 5, 6, \"-\", 1, 2, 3, \"+\", \".\", 0, \"=\", \"/\"])\n  const [output, setOutput] = useState([])\n  const [btnDisabled, setBtnDisabled] = useState(false)\n  const clickHandler = (index, e) => {\n    \n    if (e.target.innerHTML === \"=\" && output) {\n      equalsHandler()\n    }\n    else if ( e.target.innerHTML === \"square\" ){\n      squareHandler()\n    } else if (e.target.innerHTML === \"sqrt\"){\n      sqrtHandler()\n    } else if ( e.target.innerHTML === \"clear\"){\n      screenClear()\n    } else if (e.target.innerHTML === \"back\"){\n      backHandler()\n    }\n    else {\n      setBtnDisabled(false)\n      const storedOutput = [...output]\n      storedOutput.push(buttons[index])\n      setOutput(storedOutput)\n    }\n  }\n  const squareHandler = () => {\n    if (output.length >0) {\n      const storedOutput = [...output]\n      const joinedOutput = storedOutput.join(\"\")\n      const answer = square(joinedOutput)\n      console.log(answer);\n      const strans = answer.toString()\n      const splitans = strans.split(\"\")\n      setOutput(splitans)\n    }\n  }\n  const sqrtHandler = () => {\n    if (output.length >0) {\n      const storedOutput = [...output]\n      const joinedOutput = storedOutput.join(\"\")\n      const answer = sqrt(joinedOutput)\n      console.log(answer);\n      const strans = answer.toString()\n      const splitans = strans.split(\"\")\n      setOutput(splitans)\n    }\n  }\n  const screenClear = () => {\n    setOutput(\"\")\n  }\n  const backHandler = () => {\n\n  }\n  const equalsHandler = () => {\n    if (output.length > 1) {\n      const storedOutput = [...output]\n      const joinedOutput = storedOutput.join(\"\")\n      const answer = evaluate(joinedOutput)\n      const strans = answer.toString()\n      const splitans = strans.split(\"\")\n      setOutput(splitans)\n    }\n  }\n\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"screen\">{output}</div>\n      <div className=\"container\">\n\n        {buttons.map((button, index) => {\n          return <button disabled={btnDisabled} className=\"btn\" key={index} onClick={(e) => clickHandler(index, e)}>{button}</button>\n\n        })}\n        {/* <div className=\"equals\" onClick={equalsHandler}>=</div> */}\n      </div>\n    </div>\n  )\n}\n\n// const Button = (clickHandler, props, button) => {\n//   return (\n//     <div className=\"btn\" onClick={clickHandler}>{button}</div>\n//   )\n// }\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}