{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","buttons","ops","output","setOutput","sum","setSum","outputHandler","index","storedOutput","push","storedSum","backHandler","pop","squareHandler","length","square","join","toString","split","sqrtHandler","sqrt","toFixed","unshift","screenClear","equalsHandler","evaluate","className","map","button","onClick","e","includes","console","log","target","innerHTML","clickHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oOAuGeA,EAlGH,WACV,MAAkBC,mBAAS,CAAC,SAAU,OAAQ,QAAS,OAAQ,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,EAAG,IAAK,MAA/GC,EAAP,oBACMC,EAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KACjC,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsBJ,mBAAS,IAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAmBMC,EAAgB,SAACC,GACrB,IAAMC,EAAY,YAAON,GACzBM,EAAaC,KAAKT,EAAQO,IAC1BJ,EAAUK,GAEV,IAAME,EAAS,YAAON,GACtBM,EAAUD,KAAKT,EAAQO,IACvBF,EAAOK,IAGHC,EAAc,WAClB,IAAMH,EAAY,YAAON,GACzBM,EAAaI,MACbT,EAAUK,GAEV,IAAME,EAAS,YAAON,GACtBM,EAAUE,MACVP,EAAOK,IAEHG,EAAgB,WACpB,GAAIX,EAAOY,OAAS,EAAG,CACrB,IAAMN,EAAY,YAAON,GACzBC,EAAUY,aAAOP,EAAaQ,KAAK,KAAKC,WAAWC,MAAM,KAEzD,IAAMR,EAAS,YAAON,GACtBM,EAAUD,KAAK,QACfJ,EAAOK,KAILS,EAAc,WAClB,GAAIjB,EAAOY,OAAS,EAAG,CACrB,IAAMN,EAAY,YAAON,GACzBC,EAAUiB,aAAKZ,EAAaQ,KAAK,KAAKK,QAAQ,GAAGJ,WAAWC,MAAM,KAElE,IAAMR,EAAS,YAAON,GACtBM,EAAUY,QAAQ,UAClBjB,EAAOK,KAGLa,EAAc,WAClBpB,EAAU,IACVE,EAAO,KAGHmB,EAAgB,WACpB,GAAItB,EAAOY,OAAS,EAAG,CACrB,IAAMN,EAAY,YAAON,GACzBC,EAAUsB,YAASjB,EAAaQ,KAAK,KAAKC,WAAWC,MAAM,KAE3D,IAAMR,EAAS,YAAON,GACtBM,EAAUD,KAAK,KACfC,EAAUY,QAAQ,KAClBjB,EAAOK,KAIX,OACE,sBAAKgB,UAAU,aAAf,UACE,sBAAKA,UAAU,SAAf,UAAyBxB,EAAO,qBAAKwB,UAAU,MAAf,SAAsBtB,OAEtD,qBAAKsB,UAAU,YAAf,SAEG1B,EAAQ2B,KAAI,SAACC,EAAQrB,GACpB,OAAO,wBAAQmB,UAAU,MAAkBG,QAAS,SAACC,GAAD,OAjFvC,SAACvB,EAAOuB,EAAGF,GAC9B3B,EAAI8B,SAASH,IAAW3B,EAAI8B,SAAS7B,EAAOA,EAAOY,OAAS,IAC1DkB,QAAQC,IAAI,iBACa,MAAvBH,EAAEI,OAAOC,WAAqBjC,EAC9BsB,IACyB,WAAvBM,EAAEI,OAAOC,UACTtB,IACyB,SAAvBiB,EAAEI,OAAOC,UACThB,IACyB,UAAvBW,EAAEI,OAAOC,UACTZ,IACyB,SAAvBO,EAAEI,OAAOC,UACTxB,IACEL,EAAcC,GAoEqC6B,CAAa7B,EAAOuB,EAAGF,IAA3E,SAAqFA,GAAxDrB,YChF/B8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1b038250.chunk.js","sourcesContent":["import React from \"react\"\nimport { useState } from \"react\"\nimport { evaluate, sqrt, square } from \"mathjs\"\n\n\nconst App = () => {\n  const [buttons] = useState([\"square\", \"sqrt\", \"clear\", \"back\", 7, 8, 9, \"*\", 4, 5, 6, \"-\", 1, 2, 3, \"+\", \".\", 0, \"=\", \"/\"])\n  const ops = [\"/\", \"*\", \"+\", \"-\", \".\"]\n  const [output, setOutput] = useState([]) //JUST USE A STRING INSTEAD OF AN ARRAY NEXT TIME FFS\n  const [sum, setSum] = useState([])\n\n  const clickHandler = (index, e, button) => {\n    ops.includes(button) && ops.includes(output[output.length - 1]) ?\n      console.log(\"don't do that\")\n      : e.target.innerHTML === \"=\" && output ?\n        equalsHandler()\n        : e.target.innerHTML === \"square\" ?\n          squareHandler()\n          : e.target.innerHTML === \"sqrt\" ?\n            sqrtHandler()\n            : e.target.innerHTML === \"clear\" ?\n              screenClear()\n              : e.target.innerHTML === \"back\" ?\n                backHandler()\n                : outputHandler(index)\n\n  }\n\n  const outputHandler = (index) => {\n    const storedOutput = [...output]\n    storedOutput.push(buttons[index])\n    setOutput(storedOutput)\n\n    const storedSum = [...sum]\n    storedSum.push(buttons[index])\n    setSum(storedSum)\n  }\n\n  const backHandler = () => {\n    const storedOutput = [...output]\n    storedOutput.pop()\n    setOutput(storedOutput)\n\n    const storedSum = [...sum]\n    storedSum.pop()\n    setSum(storedSum)\n  }\n  const squareHandler = () => {\n    if (output.length > 0) {\n      const storedOutput = [...output]\n      setOutput(square(storedOutput.join(\"\")).toString().split(\"\"))\n\n      const storedSum = [...sum]\n      storedSum.push(\"²\")\n      setSum(storedSum)\n    }\n\n  }\n  const sqrtHandler = () => {\n    if (output.length > 0) {\n      const storedOutput = [...output]\n      setOutput(sqrt(storedOutput.join(\"\")).toFixed(2).toString().split(\"\"))\n\n      const storedSum = [...sum]\n      storedSum.unshift(\"√\")\n      setSum(storedSum)\n    }\n  }\n  const screenClear = () => {\n    setOutput(\"\")\n    setSum(\"\")\n  }\n\n  const equalsHandler = () => {\n    if (output.length > 1) {\n      const storedOutput = [...output]\n      setOutput(evaluate(storedOutput.join(\"\")).toString().split(\"\"))\n\n      const storedSum = [...sum]\n      storedSum.push(\")\")\n      storedSum.unshift(\"(\")\n      setSum(storedSum)\n    }\n  }\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"screen\">{output}<div className=\"sum\">{sum}</div></div>\n\n      <div className=\"container\">\n\n        {buttons.map((button, index) => {\n          return <button className=\"btn\" key={index} onClick={(e) => clickHandler(index, e, button)}>{button}</button>\n\n        })}\n\n      </div>\n    </div>\n  )\n}\n\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}